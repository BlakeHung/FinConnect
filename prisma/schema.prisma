generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  FINANCE_MANAGER
  USER
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String       @unique
  password      String
  role          UserRole     @default(USER)
  transactions  Transaction[]
  activities    ActivityParticipant[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Category {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         String        // 'EXPENSE' | 'INCOME'
  isDefault    Boolean       @default(false)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Activity {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  startDate       DateTime
  endDate         DateTime
  description     String?
  participants    ActivityParticipant[]
  transactions    Transaction[]
  status          String        @default("ACTIVE")
  enabled         Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  edm             EDM?
}

model ActivityParticipant {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  activityId  String    @db.ObjectId
  userId      String    @db.ObjectId
  activity    Activity  @relation(fields: [activityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  isAttending Boolean   @default(true)
  companions  Int       @default(0)
  note        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([activityId, userId])
}

model EDM {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  content         String
  images          String[]  @default([])
  contactInfo     String?
  registrationLink String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  activity        Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId      String    @unique @db.ObjectId
}

model Transaction {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  type        String    // 'EXPENSE' | 'INCOME'
  date        DateTime
  description String?
  images      String[]
  categoryId  String    @db.ObjectId
  category    Category  @relation(fields: [categoryId], references: [id])
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  activityId  String?   @db.ObjectId
  activity    Activity? @relation(fields: [activityId], references: [id])
  status      String    @default("PENDING") // PENDING, APPROVED, REJECTED
  paymentStatus String  @default("UNPAID")  // UNPAID, PAID
  paidAt      DateTime? // 付款日期，可選
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}