generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  FINANCE_MANAGER
  USER
}

model User {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String              @unique
  password      String
  role          UserRole            @default(USER)
  image         String?
  transactions  Transaction[]
  activities    ActivityParticipant[]
  createdGroups Group[]
  payments      TransactionPayment[] // 新增: 付款記錄
  groupMembers  GroupMember[]       // 用戶在群組中的成員身份
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model Category {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         String        // 'EXPENSE' | 'INCOME'
  isDefault    Boolean       @default(false)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Activity {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  startDate       DateTime
  endDate         DateTime
  description     String?
  participants    ActivityParticipant[]
  transactions    Transaction[]
  groups          ActivityGroup[]
  status          String        @default("ACTIVE")
  enabled         Boolean       @default(true)
  settlements     ActivitySettlement[] // 新增: 結帳記錄
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  edm             EDM?
}

model ActivityParticipant {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  activityId  String    @db.ObjectId
  userId      String    @db.ObjectId
  activity    Activity  @relation(fields: [activityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  isAttending Boolean   @default(true)
  companions  Int       @default(0)
  note        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([activityId, userId])
}

model EDM {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  content         String
  images          String[]  @default([])
  contactInfo     String?
  registrationLink String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  activity        Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId      String    @unique @db.ObjectId
}

model Transaction {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  type          String      // 'EXPENSE' | 'INCOME'
  date          DateTime
  description   String?
  images        String[]
  categoryId    String      @db.ObjectId
  category      Category    @relation(fields: [categoryId], references: [id])
  groupMemberId String      @db.ObjectId
  groupMember   GroupMember @relation(fields: [groupMemberId], references: [id])
  activityId    String?     @db.ObjectId
  activity      Activity?   @relation(fields: [activityId], references: [id])
  status        String      @default("PENDING") // PENDING, APPROVED, REJECTED
  groupId       String?     @db.ObjectId
  group         Group?      @relation(fields: [groupId], references: [id])
  settlementId  String?     @db.ObjectId  // 新增: 關聯到結帳記錄
  settlement    ActivitySettlement? @relation(fields: [settlementId], references: [id]) // 新增: 關聯到結帳記錄
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// 群體定義
model Group {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  name              String                // 群體名稱
  description       String?               // 描述
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  members           GroupMember[]         // 群體成員
  activities        ActivityGroup[]       // 參與的活動
  transactions      Transaction[]         // 新增: 關聯的交易
  transactionSplits TransactionMemberSplit[] // 新增: 交易分帳記錄
  createdBy         User                  @relation(fields: [createdById], references: [id])
  createdById       String                @db.ObjectId
}

// 群體成員
model GroupMember {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  name              String                // 成員名稱
  group             Group                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId           String                @db.ObjectId
  // 新增: 與系統用戶的可選關聯
  userId            String?               @db.ObjectId
  user              User?                 @relation(fields: [userId], references: [id])
  transactionSplits TransactionMemberSplit[] // 交易分帳記錄
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

// 活動中的群體參與
model ActivityGroup {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  activity    Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId  String    @db.ObjectId
  group       Group     @relation(fields: [groupId], references: [id])
  groupId     String    @db.ObjectId
  memberCount Int       // 這個活動中，這個群體實際參與的人數
  expenses    ActivityGroupExpense[] // 這個群體在活動中的支出
  members     ActivityGroupMember[] // 新增: 群組成員參與狀態
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([activityId, groupId])
}

// 新增: 活動群組成員參與狀態
model ActivityGroupMember {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  activityGroup   ActivityGroup @relation(fields: [activityGroupId], references: [id], onDelete: Cascade)
  activityGroupId String        @db.ObjectId
  groupMember     GroupMember   @relation(fields: [groupMemberId], references: [id])
  groupMemberId   String        @db.ObjectId
  isParticipating Boolean       @default(true) // 是否參與活動
  companions      Int           @default(0)    // 攜帶人數
  note            String?       // 備註
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([activityGroupId, groupMemberId])
}

// 活動群體支出
model ActivityGroupExpense {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  activityGroup   ActivityGroup @relation(fields: [activityGroupId], references: [id], onDelete: Cascade)
  activityGroupId String        @db.ObjectId
  amount          Float         // 支出金額
  splitType       String        // 分帳方式：EQUAL（平均）, PERCENTAGE（比例）, FIXED（固定金額）
  splitValue      Float?        // 分帳值（比例時為百分比，固定金額時為金額）
  description     String?       // 描述
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// 新增: 活動結帳記錄
model ActivitySettlement {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  activity        Activity      @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId      String        @db.ObjectId
  groupMember     GroupMember   @relation(fields: [groupMemberId], references: [id])
  groupMemberId   String        @db.ObjectId
  shouldPay       Float         // 應付金額
  paidAmount      Float         // 已付金額（從 Transaction 統計）
  balance         Float         // 待付金額（shouldPay - paidAmount）
  status          String        @default("PENDING") // PENDING, PAID
  note            String?       // 備註
  settledAt       DateTime?     // 關帳時間
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([activityId, groupMemberId])
}