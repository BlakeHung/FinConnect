generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  FINANCE_MANAGER
  USER
}

model User {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String              @unique
  password      String
  role          UserRole            @default(USER)
  image         String?
  transactions  Transaction[]
  createdGroups Group[]
  groupMembers  GroupMember[]       // 用戶在群組中的成員身份
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model Category {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         String        // 'EXPENSE' | 'INCOME'
  isDefault    Boolean       @default(false)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Activity {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  startDate       DateTime
  endDate         DateTime
  description     String?
  transactions    Transaction[]
  groupIds        String[]      @db.ObjectId
  groups          Group[]       @relation(fields: [groupIds], references: [id])
  status          String        @default("ACTIVE")
  enabled         Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  edm             EDM?
}

model EDM {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  content         String
  images          String[]  @default([])
  contactInfo     String?
  registrationLink String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  activity        Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId      String    @unique @db.ObjectId
}

model Transaction {
  id            String                @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  type          String                // 'EXPENSE' | 'INCOME'
  date          DateTime
  description   String?
  images        String[]
  categoryId    String                @db.ObjectId
  category      Category              @relation(fields: [categoryId], references: [id])
  userId        String                @db.ObjectId
  user          User                  @relation(fields: [userId], references: [id])
  activityId    String?               @db.ObjectId
  activity      Activity?             @relation(fields: [activityId], references: [id])
  status        String                @default("PENDING") // PENDING, APPROVED, REJECTED
  paymentStatus String                @default("UNPAID")  // UNPAID, PAID
  paidAt        DateTime?             // 付款日期，可選
  groupId       String?               @db.ObjectId
  group         Group?                @relation(fields: [groupId], references: [id])
  splits        TransactionSplit[]
  payments      TransactionPayment[]  // 交易的付款記錄
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
}

// 新增: 交易的付款記錄
model TransactionPayment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  transactionId String      @db.ObjectId
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  payerId       String      @db.ObjectId
  payer         GroupMember @relation(fields: [payerId], references: [id], onDelete: Cascade)
  amount        Float       // 支付金額
  paymentDate   DateTime    @default(now())
  paymentMethod String?     // 付款方式
  note          String?     // 備註
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// 群體定義
model Group {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  name              String                // 群體名稱
  description       String?               // 描述
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  members           GroupMember[]         // 群體成員
  activityIds       String[]              @db.ObjectId
  activities        Activity[]            @relation(fields: [activityIds], references: [id])
  transactions      Transaction[]         // 關聯的交易
  createdBy         User                  @relation(fields: [createdById], references: [id])
  createdById       String                @db.ObjectId
}

// 群體成員
model GroupMember {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String              // 成員名稱
  group             Group               @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId           String              @db.ObjectId
  // 新增: 與系統用戶的可選關聯
  userId            String?             @db.ObjectId
  user              User?               @relation(fields: [userId], references: [id])
  assignedSplits    TransactionSplit[]  // 只保留這個欄位，作為 TransactionSplit.assignedTo 的反向關聯
  payments          TransactionPayment[] // 新增：付款記錄
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}


// 新增: 交易分帳記錄
model TransactionSplit {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  transactionId   String      @db.ObjectId
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  splitAmount     Float       // 分帳金額
  description     String?     // 分帳說明
  assignedToId    String      @db.ObjectId
  assignedTo      GroupMember @relation(fields: [assignedToId], references: [id])
  status          String      @default("EQUAL") // EQUAL, PERCENTAGE, FIXED
  isIncluded      Boolean     @default(true)    // 是否納入計算
  splitValue      Float?      // 分帳值
  splitItemType   String?     // 新增：分帳項目類型，如"牡蠣"、"酒類"、"一般食物"
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}